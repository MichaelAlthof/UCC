VARselect(dat, lag.max = 10, type = "const")$selection
#K=AIC lag// Eigen test
cointest = ca.jo(dat, K=6, type = "eigen", ecdet="const", spec="transitory")
summary(cointest)
ct_daily
# Daily Correlation -------------------------------------------------------
colnames(ct_daily)
# Daily Correlation -------------------------------------------------------
ind = !colnames(ct_daily) %in% 'VIX'
# Daily Correlation -------------------------------------------------------
ind = !colnames(ct_daily) %in% 'VIX'
s = print.xtable(xtable(ct_daily[ind,ind]),hline.after=c(-1,-1,0,nrow(ct_daily),nrow(ct_daily)))
write(s,'correlation_daily_latex.txt')
# Daily Correlation -------------------------------------------------------
ind = !colnames(ct_daily) %in% 'VIX'
s = print.xtable(xtable(ct_daily[ind,ind]),hline.after=c(-1,-1,0,nrow(ct_daily[ind,ind]),nrow(ct_daily[ind,ind])))
write(s,'correlation_daily_latex.txt')
write(s,'correlation_daily_latex.txt')
# Daily Correlation -------------------------------------------------------
ind = !colnames(ct_daily) %in% 'VIX'
s = print.xtable(xtable(ct_daily[ind,ind]),hline.after=c(-1,-1,0,nrow(ct_daily[ind,ind]),nrow(ct_daily[ind,ind])))
write(s,'correlation_daily_latex.txt')
# Monthly Correlation -----------------------------------------------------
ind = !colnames(ct_daily) %in% 'VIX'
s = print.xtable(xtable(ct_monthly[ind,ind]),hline.after=c(-1,-1,0,nrow(ct_monthly[ind,ind]),nrow(ct_monthly[ind,ind])))
write(s,'correlation_monthly_latex.txt')
??kurtosis
?kurtosis
rm(list=ls())
library(quantmod)
data = new.env()
getSymbols(c("XAUUSD=X", "^GSPC","^VIX","BTC-USD", "ETH-USD", "XRP-USD","LTC-USD"), from = "2008-01-01", env = data)
data = as.list(data) # named list of the indices
names(data) = gsub('-USD','',names(data))
data = lapply(data,function(x){
names(x) = gsub('-USD','',names(x))
return(x)
})
data = lapply(data,function(x){
if (sum(duplicated(index(x))) == 0)
return(x)
while (sum(duplicated(index(x))) != 0){
idx = index(x)[duplicated(index(x))]
print(idx[1])
idx = which(index(x) %in% idx[1])
idx = idx[1:length(idx)-1]
x = x[-idx,]
}
return(x)
})
# Extracting the closing prices  ----------------------------------------------
data <- lapply(data, Cl)
lapply(data,function(x) sum(duplicated(index(x))))
#write.csv2(do.call("merge.xts", data), "20180401_Trad_MaxCC.csv", row.names=TRUE)
#log ret
dataLogRet = lapply(data, function(x) na.omit(diff(log(x))))
# merging the financial data
dataLogRet = do.call("merge.xts", dataLogRet)
colnames(dataLogRet) = gsub(pattern = ".Close","",colnames(dataLogRet))
write.csv(dataLogRet,'data_cc_daily_log_returns.csv',row.names = index(dataLogRet))
# merging the financial data
data = do.call("merge.xts", data)
colnames(data) = gsub(pattern = ".Close","",colnames(data))
write.csv(data,'data_cc_daily_prices.csv',row.names = index(data))
rm(list=ls())
library(quantmod)
data = new.env()
getSymbols(c("XAUUSD", "^GSPC","^VIX","BTC-USD", "ETH-USD", "XRP-USD","LTC-USD"), from = "2008-01-01", env = data)
data = as.list(data) # named list of the indices
names(data) = gsub('-USD','',names(data))
data = lapply(data,function(x){
names(x) = gsub('-USD','',names(x))
return(x)
})
data = lapply(data,function(x){
if (sum(duplicated(index(x))) == 0)
return(x)
while (sum(duplicated(index(x))) != 0){
idx = index(x)[duplicated(index(x))]
print(idx[1])
idx = which(index(x) %in% idx[1])
idx = idx[1:length(idx)-1]
x = x[-idx,]
}
return(x)
})
# Extracting the closing prices  ----------------------------------------------
data <- lapply(data, Cl)
lapply(data,function(x) sum(duplicated(index(x))))
#write.csv2(do.call("merge.xts", data), "20180401_Trad_MaxCC.csv", row.names=TRUE)
#log ret
dataLogRet = lapply(data, function(x) na.omit(diff(log(x))))
# merging the financial data
dataLogRet = do.call("merge.xts", dataLogRet)
colnames(dataLogRet) = gsub(pattern = ".Close","",colnames(dataLogRet))
write.csv(dataLogRet,'data_cc_daily_log_returns.csv',row.names = index(dataLogRet))
# merging the financial data
data = do.call("merge.xts", data)
colnames(data) = gsub(pattern = ".Close","",colnames(data))
write.csv(data,'data_cc_daily_prices.csv',row.names = index(data))
rm(list=ls())
library(quantmod)
data = new.env()
getSymbols(c("XAU", "^GSPC","^VIX","BTC-USD", "ETH-USD", "XRP-USD","LTC-USD"), from = "2008-01-01", env = data)
data = as.list(data) # named list of the indices
names(data) = gsub('-USD','',names(data))
data = lapply(data,function(x){
names(x) = gsub('-USD','',names(x))
return(x)
})
data = lapply(data,function(x){
if (sum(duplicated(index(x))) == 0)
return(x)
while (sum(duplicated(index(x))) != 0){
idx = index(x)[duplicated(index(x))]
print(idx[1])
idx = which(index(x) %in% idx[1])
idx = idx[1:length(idx)-1]
x = x[-idx,]
}
return(x)
})
# Extracting the closing prices  ----------------------------------------------
data <- lapply(data, Cl)
lapply(data,function(x) sum(duplicated(index(x))))
#write.csv2(do.call("merge.xts", data), "20180401_Trad_MaxCC.csv", row.names=TRUE)
#log ret
dataLogRet = lapply(data, function(x) na.omit(diff(log(x))))
# merging the financial data
dataLogRet = do.call("merge.xts", dataLogRet)
colnames(dataLogRet) = gsub(pattern = ".Close","",colnames(dataLogRet))
write.csv(dataLogRet,'data_cc_daily_log_returns.csv',row.names = index(dataLogRet))
# merging the financial data
data = do.call("merge.xts", data)
colnames(data) = gsub(pattern = ".Close","",colnames(data))
write.csv(data,'data_cc_daily_prices.csv',row.names = index(data))
rm(list=ls())
library(quantmod)
data = new.env()
getSymbols(c("XAUUSD=X", "^GSPC","^VIX","BTC-USD", "ETH-USD", "XRP-USD","LTC-USD"), from = "2008-01-01", env = data)
data = as.list(data) # named list of the indices
names(data) = gsub('-USD','',names(data))
data = lapply(data,function(x){
names(x) = gsub('-USD','',names(x))
return(x)
})
data = lapply(data,function(x){
if (sum(duplicated(index(x))) == 0)
return(x)
while (sum(duplicated(index(x))) != 0){
idx = index(x)[duplicated(index(x))]
print(idx[1])
idx = which(index(x) %in% idx[1])
idx = idx[1:length(idx)-1]
x = x[-idx,]
}
return(x)
})
# Extracting the closing prices  ----------------------------------------------
data <- lapply(data, Cl)
lapply(data,function(x) sum(duplicated(index(x))))
#write.csv2(do.call("merge.xts", data), "20180401_Trad_MaxCC.csv", row.names=TRUE)
#log ret
dataLogRet = lapply(data, function(x) na.omit(diff(log(x))))
# merging the financial data
dataLogRet = do.call("merge.xts", dataLogRet)
colnames(dataLogRet) = gsub(pattern = ".Close","",colnames(dataLogRet))
write.csv(dataLogRet,'data_cc_daily_log_returns.csv',row.names = index(dataLogRet))
# merging the financial data
data = do.call("merge.xts", data)
colnames(data) = gsub(pattern = ".Close","",colnames(data))
write.csv(data,'data_cc_daily_prices.csv',row.names = index(data))
View(data)
rm(list=ls())
library(quantmod)
data = new.env()
getSymbols(c("XAUUSD", "^GSPC","^VIX","BTC-USD", "ETH-USD", "XRP-USD","LTC-USD"), from = "2008-01-01", env = data)
rm(list=ls())
library(quantmod)
data = new.env()
getSymbols(c("XAUUSD-X", "^GSPC","^VIX","BTC-USD", "ETH-USD", "XRP-USD","LTC-USD"), from = "2008-01-01", env = data)
data = as.list(data) # named list of the indices
names(data) = gsub('-USD','',names(data))
data = lapply(data,function(x){
names(x) = gsub('-USD','',names(x))
return(x)
})
data = lapply(data,function(x){
if (sum(duplicated(index(x))) == 0)
return(x)
while (sum(duplicated(index(x))) != 0){
idx = index(x)[duplicated(index(x))]
print(idx[1])
idx = which(index(x) %in% idx[1])
idx = idx[1:length(idx)-1]
x = x[-idx,]
}
return(x)
})
# Extracting the closing prices  ----------------------------------------------
data <- lapply(data, Cl)
lapply(data,function(x) sum(duplicated(index(x))))
#write.csv2(do.call("merge.xts", data), "20180401_Trad_MaxCC.csv", row.names=TRUE)
#log ret
dataLogRet = lapply(data, function(x) na.omit(diff(log(x))))
# merging the financial data
dataLogRet = do.call("merge.xts", dataLogRet)
colnames(dataLogRet) = gsub(pattern = ".Close","",colnames(dataLogRet))
write.csv(dataLogRet,'data_cc_daily_log_returns.csv',row.names = index(dataLogRet))
# merging the financial data
data = do.call("merge.xts", data)
colnames(data) = gsub(pattern = ".Close","",colnames(data))
write.csv(data,'data_cc_daily_prices.csv',row.names = index(data))
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
jb = t(jb)
table = print.xtable(xtable(jb,digits=c(0,4,4,2,2,2,2)),hline.after=c(-1,-1,0,nrow(tbl),nrow(tbl)))
table = print.xtable(xtable(jb,digits=4,hline.after=c(-1,-1,0,nrow(tbl),nrow(tbl))))
write(table,paste0('jarque_bera_log_return_',ifelse(monthly,'monthly','daily'),'_latex.txt'))
setwd("~/Documents/GitHub/UCC")
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv'))
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
jb = t(jb)
table = print.xtable(xtable(jb,digits=c(0,4,4,2,2,2,2)),hline.after=c(-1,-1,0,nrow(tbl),nrow(tbl)))
table = print.xtable(xtable(jb,digits=4,hline.after=c(-1,-1,0,nrow(tbl),nrow(tbl))))
write(table,paste0('jarque_bera_log_return_',ifelse(monthly,'monthly','daily'),'_latex.txt'))
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
dplyr::last(data, 1)
dplyr::last(tmp, 1)
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
dplyr::select(tmp)
dplyr::select(tmp, "date")
rm(list=ls())
###
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
#dplyr::select(tmp, "date")
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
rm(list=ls())
###
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
View(dd)
View(tmp)
rm(list=ls())
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
View(dd)
head(tmo)
head(tmp)
m(list=ls())
###
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
head(tmp)
jb
rm(list=ls())
detach("package:utils", unload=TRUE)
detach("package:xtable", unload=TRUE)
detach("package:xts", unload=TRUE)
detach("package:zoo", unload=TRUE)
detach("package:urca", unload=TRUE)
detach("package:TTR", unload=TRUE)
detach("package:tseries", unload=TRUE)
detach("package:tidyverse", unload=TRUE)
detach("package:tidyr", unload=TRUE)
detach("package:tidyquant", unload=TRUE)
detach("package:tibble", unload=TRUE)
detach("package:stringr", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:readr", unload=TRUE)
detach("package:RcppRoll", unload=TRUE)
detach("package:quantmod", unload=TRUE)
detach("package:purrr", unload=TRUE)
detach("package:PerformanceAnalytics", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:lubridate", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:forcats", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:datasets", unload=TRUE)
rm(list=ls())
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
setwd("~/Documents/GitHub/UCC")
rm(list=ls())
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
jb = sapply(tmp,function(x){
c('Jarque-Bera statistic' = as.numeric(jarque.bera.test(x)[1]),
'P-value' = as.numeric(jarque.bera.test(x)[3])
)
})
rm(list=ls())
###
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
#dplyr::select(tmp, "date")
tseries::jarque.bera.test(x)
#dplyr::select(tmp, "date")
tseries::jarque.bera.test(tmp)
rm(list=ls())
# set parameters for plots ------------------------------------------------
colors = c("red1","aquamarine4","goldenrod2", "lightpink3", "blue3", "black")
names(colors) = c('GLD', "XRP", "ETH", 'VIX',"SP500", "BTC")
print(colors)
# TRUE = monthly data, FALSE= daily
# FALSE for QQ Plot = Daily
monthly = FALSE
# --------------------------------------------------------------
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR","xtable", "ggplot2")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv'))
# log return statistics ---------------------------------------------------
dd = read.csv2(paste0('data_cc_daily_log_returns.csv'))
tmp = xts(x = dd[,-1],as.Date(dd[,1]))
tmp = tmp[index(tmp) >= "2017-05-01"]
tmp = tmp[,!grepl(pattern = 'VIX',colnames(tmp))]
if(monthly)
tmp = apply.monthly(tmp,mean, na.rm=TRUE)
tbl = sapply(tmp,function(x){
c('Mean' = mean(x, na.rm = T),
'Std. Dev.' = sd(x, na.rm = T),
'Skewness' = skewness(x, na.rm = T),
'Kurtosis' = kurtosis(x, na.rm = T),
'Min.' = min(x, na.rm = T),
'Max.' = max(x, na.rm = T)
)
})
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv'))
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv',sep=";"))
setwd("~/Documents/GitHub/UCC")
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv',sep=";"))
rm(list=ls())
###
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv',sep=";"))
setwd("~/Documents/GitHub/UCC")
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv',sep=";"))
setwd("~/Documents/GitHub/UCC")
rm(list=ls())
###
libraries = c("xts","dplyr","RcppRoll","tidyverse", "tidyquant", "TTR",'xtable','tseries')
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
monthly = FALSE
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv',sep=";"))
library(readr)
data_cc_daily_log_returns <- read_csv("data_cc_daily_log_returns.csv")
View(data_cc_daily_log_returns)
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv',sep=";"))
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv'))
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv',sep=';'))
# log return statistics ---------------------------------------------------
dd = read.csv(paste0('data_cc_daily_log_returns.csv', sep=';'))
